{"version":3,"sources":["components/loader.js","components/listLayout.js","components/modal.js","Popup.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","React","Component","ListLayout","this","props","entries","isSelected","selectedRefEntries","handleSelect","loadContent","searchMsg","totalEntries","skip","selectedRef","isLoading","renderEntries","length","map","entry","checked","some","check","uid","title","id","onClick","event","liElement","currentTarget","classList","remove","add","checkbox","childNodes","type","defaultChecked","onChange","style","target","parentNode","_content_type_uid","moment","updated_at","format","publish_details","env","index","display","PureComponent","Modal","selectingRefEntries","selectedEntries","state","splice","findIndex","setState","newlist","push","loadMore","count","window","opener","postMessage","message","prevState","sendAndClose","closeandsend","closeWindow","showAllEntries","showselectedEntries","searchQueryHandler","query","value","toLowerCase","searchQuery","charCode","initialEntries","initialCount","fetchQuery","document","getElementById","selectRef","reference","referenceTo","forEach","extension","undefined","bind","newProps","setTimeout","searchResult","loadmoreResult","concat","children","placeholder","onKeyPress","Popup","onCloseWindow","close","config","getConfig","addEventListener","data","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yRAEqBA,E,4JACnB,WACE,OACE,sBAAKC,UAAU,SAAf,UACE,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,0BAEF,8BACE,iC,GAtC0BC,IAAMC,W,iBCGrBC,G,kKACnB,WACE,MAAsIC,KAAKC,MAAnIC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,mBAAoBC,EAAjD,EAAiDA,aAAcC,EAA/D,EAA+DA,YAAaC,EAA5E,EAA4EA,UAAWC,EAAvF,EAAuFA,aAAcC,EAArG,EAAqGA,KAAMC,EAA3G,EAA2GA,YAAaC,EAAxH,EAAwHA,UACpHC,EAAgBT,EAAaC,EAAqBF,EAEtD,OACE,qBAAIN,UAAU,cAAd,UACE,qBAAIA,UAAU,aAAd,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,kBAAf,kBACA,qBAAKA,UAAU,kBAAf,yBACA,qBAAKA,UAAU,kBAAf,gCAEF,qBAAKA,UAAU,aAAf,SACGgB,EAAcC,OAAS,EACtB,qCACE,oCACGD,QADH,IACGA,OADH,EACGA,EAAeE,KAAI,SAACC,GACnB,IAAMC,EAAUZ,EAAmBa,MACjC,SAACC,GAAD,OAAWA,EAAMC,MAAQJ,EAAMI,OAEjC,OACE,qBACEC,MAAOL,EAAMK,MACbC,GAAIN,EAAMI,IAEVvB,UAAWoB,EAAU,SAAW,GAChCM,QAAS,SAACC,GACR,IAAMC,EAAYD,EAAME,cACvBT,GAAWD,EAAMI,MAAQK,EAAUH,GAEhCG,EAAUE,UAAUC,OAAO,UAD3BH,EAAUE,UAAUE,IAAI,UAE5BvB,EAAaU,GACb,IAAMc,EACJL,EAAUM,WAAW,GAAGA,WAAW,GAAGA,WAAW,GACnDD,EAASb,SAAWa,EAASb,SAbjC,UAgBE,qBAAKpB,UAAU,kBAAf,SACE,kCACE,uBACEmC,KAAK,WACLnC,UAAU,KACVoC,eAAgBhB,EAChBiB,SAAU,SAACV,GACT,IAAMW,EAAQX,EAAMY,OAAOC,WAAWA,WAAWA,WAEhDpB,GAAWD,EAAMI,MAAQe,EAAMb,GAE5Ba,EAAMR,UAAUC,OAAO,UADvBO,EAAMR,UAAUE,IAAI,UAExBvB,EAAaU,MAGjB,sBAAMnB,UAAU,aAGnBO,EACC,sBAAKP,UAAU,kBAAf,UAAkCmB,EAAMK,MACtC,sBAAKxB,UAAU,eAAf,2BAA4C,+BAAOmB,EAAMsB,0BAG3D,qBAAKzC,UAAU,kBAAf,SAAkCmB,EAAMK,QAE1C,qBAAKxB,UAAU,kBAAf,SACG0C,IAAOvB,EAAMwB,YAAYC,OACxB,qBAEJ,qBAAK5C,UAAU,kBAAf,SACEmB,EAAM0B,gBAAgB5B,OAAS,EAAIE,EAAM0B,gBAAgB3B,KAAI,SAAC4B,EAAKC,GACjE,OACE,qBAAgB/C,UAAU,MAA1B,UAAiC8C,EAC/B,8BACE,mBAAG9C,UAAU,6CAFR+C,MAOT,oBAAI/C,UAAU,MAAd,+BApDDmB,EAAMI,UA0DnB,qBAAKvB,UAAU,YAAYyB,GAAG,WAAWC,QAAShB,EAChD4B,MAAO,CACLU,QACEzC,GAAcM,EAAKC,GAAeF,EAC9B,OACA,SALV,SAQE,+CAIJD,IAAcI,EACZ,qBAAKf,UAAU,gBAAf,8BAEA,cAAC,EAAD,a,GAlG0BC,IAAMgD,gBCDzBC,E,kDACnB,aAAe,IAAD,8BACZ,gBAoBFC,oBAAsB,SAACC,GACrB,IAAQ5C,EAAuB,EAAK6C,MAA5B7C,mBAIR,GAHkBA,EAAmBa,MACnC,SAACF,GAAD,OAAWA,EAAMI,MAAQ6B,EAAgB7B,OAGzCf,EAAmB8C,OACjB9C,EAAmB+C,WACjB,SAACR,GAAD,OAAWA,EAAMxB,MAAQ6B,EAAgB7B,OAE3C,GAEF,EAAKiC,SAAS,CACZhD,mBAAmB,YAAKA,SAErB,CACL,IAAMiD,EAAO,YAAOjD,GACpBiD,EAAQC,KAAKN,GACb,EAAKI,SAAS,CAAEhD,mBAAoBiD,MAvC1B,EAuHdE,SAAW,WACT,MAAmC,EAAKN,MAAlCxC,EAAN,EAAMA,KAAM+C,EAAZ,EAAYA,MAAO9C,EAAnB,EAAmBA,YAEfD,EAAKC,IAAgB8C,IACvBC,OAAOC,OAAOC,YAAY,CAAEC,QAAS,WAAYnD,KAAMA,EAAMC,YAAaA,GAAe,KAEzF,EAAK0C,UAAS,SAAAS,GAAS,MAAK,CAC1BpD,KAAK,2BACAoD,EAAUpD,MADX,kBAEDC,EAAcD,EAAKC,GAAe,WAhI7B,EAsIdoD,aAAe,SAACC,GACd,IAAQ3D,EAAuB,EAAK6C,MAA5B7C,mBACR2D,EACI,EAAK9D,MAAM+D,YAAY5D,GACvB,EAAKH,MAAM+D,YAAY,KA1If,EA6IdC,eAAiB,WACf,EAAKb,UAAS,SAACS,GAAD,MAAgB,CAC5B1D,YAAa0D,EAAU1D,gBA/Ib,EAmJd+D,oBAAsB,WACpB,EAAKd,UAAS,SAACS,GAAD,MAAgB,CAC5B1D,YAAa0D,EAAU1D,gBArJb,EAyJdgE,mBAAqB,SAAC5C,GACpB,IAAMb,EAAgB,EAAKuC,MAArBvC,YACA0D,EAAQ7C,EAAMY,OAAOkC,MAAMC,cACjC,EAAKlB,SAAS,CAAEmB,YAAaH,IAEN,KAAnB7C,EAAMiD,WACM,KAAVJ,EACFX,OAAOC,OAAOC,YAAY,CAAEC,QAAS,SAAUQ,MAAOA,EAAO1D,YAAaA,GAAe,KAEzF,EAAK0C,UAAS,SAAAS,GAAS,MAAK,CAC1B3D,QAAS2D,EAAUY,eACnBjB,MAAOK,EAAUa,aACjBjE,KAAK,2BACAoD,EAAUpD,MADX,kBAEDC,EAAc,WAvKX,EA8KdiE,WAAa,WACX,IAAMjE,EAAgB,EAAKuC,MAArBvC,YACF0D,EAAQQ,SAASC,eAAe,UAAUR,MAEhC,KAAVD,EACFX,OAAOC,OAAOC,YAAY,CAAEC,QAAS,SAAUQ,MAAOA,EAAO1D,YAAaA,GAAe,KAEzF,EAAK0C,UAAS,SAAAS,GAAS,MAAK,CAC1B3D,QAAS,EAAK+C,MAAMwB,eACpBjB,MAAO,EAAKP,MAAMyB,aAClBjE,KAAK,2BACAoD,EAAUpD,MADX,kBAEDC,EAAc,UA1LT,EAgMdoE,UAAY,SAACC,GACX,IAAMtE,EAAS,EAAKwC,MAAdxC,KAEN,EAAKR,MAAM+E,YAAYC,SAAQ,SAACF,GAC9BtE,EAAKsE,GAAa,KAGpB,EAAK3B,UAAS,SAAAS,GAAS,MAAK,CAC1B3D,QAAS,GACTuE,eAAgB,GAChBjB,MAAO,EACP7C,WAAW,EACXJ,WAAW,EACXG,YAAaqE,EACbtE,KAAK,2BACAoD,EAAUpD,MADX,kBAEDsE,EAAYtE,EAAKsE,GAAa,SAInCtB,OAAOC,OAAOC,YAAY,CAAEC,QAAS,MAAOnD,KAAMA,EAAMC,YAAaqE,GAAa,MAlNlF,EAAKG,UAAY,GACjB,EAAKjC,MAAQ,CACX9C,YAAY,EACZoE,YAAa,GACbrE,QAAS,GACTuE,eAAgB,GAChBjB,MAAO,EACP/C,KAAM,GACNL,mBAAoB,GACpBO,WAAW,EACXJ,WAAW,EACXG,iBAAayE,GAEf,EAAK5B,SAAW,EAAKA,SAAS6B,KAAd,gBAChB,EAAKrC,oBAAsB,EAAKA,oBAAoBqC,KAAzB,gBAC3B,EAAKT,WAAa,EAAKA,WAAWS,KAAhB,gBAClB,EAAKjB,mBAAqB,EAAKA,mBAAmBiB,KAAxB,gBAlBd,E,qDA2Cd,WACE,IAAQJ,EAAgBhF,KAAKC,MAArB+E,YACFvE,EAAST,KAAKiD,MAAdxC,KAENuE,EAAYC,SAAQ,SAACF,GACnBtE,EAAKsE,GAAa,KAGpB/E,KAAKoD,SAAS,CACZ4B,YAAaA,EACbtE,YAAasE,EAAY,KAG3BvB,OAAOC,OAAOC,YAAY,CAAEC,QAAS,MAAOnD,KAAMA,EAAMC,YAAasE,EAAY,IAAM,KAEvFhF,KAAKoD,UAAS,SAAAS,GAAS,MAAK,CAC1BpD,KAAK,2BACAoD,EAAUpD,MADX,kBAEDuE,EAAY,GAAKvE,EAAKuE,EAAY,IAAM,W,8CAK/C,SAAiCK,GAAW,IAAD,OACjCjF,EAAuBJ,KAAKC,MAA5BG,mBAEJiF,EAASjF,qBAAuBA,GAClCJ,KAAKoD,SAAS,CACZhD,mBAAoBiF,EAASjF,qBAI7BiF,EAASnF,QAAQsD,MAAQ,EAC3BxD,KAAKoD,SAAS,CACZlD,QAASmF,EAASnF,QAAQA,QAC1BsD,MAAO6B,EAASnF,QAAQsD,MACxBiB,eAAgBY,EAASnF,QAAQA,QACjCwE,aAAcW,EAASnF,QAAQsD,MAC/BjD,WAAW,EACXI,WAAW,KAIb2E,YAAW,WACT,EAAKlC,SAAS,CAAE7C,WAAW,MAC1B,KACHP,KAAKoD,SAAS,CACZzC,WAAW,KAIU,iBAArB0E,EAASzB,SAA8ByB,EAASE,aAAa/B,OAAS,IACxExD,KAAKoD,SAAS,CACZlD,QAASmF,EAASE,aAAarF,QAC/BsD,MAAO6B,EAASE,aAAa/B,QAGK,IAAhC6B,EAASE,aAAa/B,OACxBxD,KAAKoD,SAAS,CACZ7C,WAAW,EACXI,WAAW,KAKQ,mBAArB0E,EAASzB,SAAgCyB,EAASG,eAAehC,MAAQ,IAC3ExD,KAAKoD,SAAS,CACZlD,QAASF,KAAKiD,MAAM/C,QAAQuF,OAAOJ,EAASG,eAAetF,WAGzDF,KAAKiD,MAAMxC,KAAKT,KAAKiD,MAAMvC,aAAeV,KAAKiD,MAAMO,QACvDoB,SAASC,eAAe,YAAY3C,MAAMU,QAAU,W,oBAqG1D,WAAU,IAAD,OACP,EAAqG5C,KAAKiD,MAAlG+B,EAAR,EAAQA,YAAa9E,EAArB,EAAqBA,QAASsD,EAA9B,EAA8BA,MAAOpD,EAArC,EAAqCA,mBAAoBG,EAAzD,EAAyDA,UAAWE,EAApE,EAAoEA,KAAMC,EAA1E,EAA0EA,YAAaC,EAAvF,EAAuFA,UAEvF,OACE,qBAAKf,UAAU,sBAAf,SACE,0BAASA,UAAU,aAAnB,UACGI,KAAKC,MAAMyF,SACZ,qBAAK9F,UAAU,eAAf,SACE,kDAEF,sBAAKA,UAAU,aAAf,UACGI,KAAKiD,MAAM9C,WACV,qBAAKP,UAAU,wBAAf,SACE,iCAAOQ,EAAmBS,OAA1B,yBAGF,sBAAKjB,UAAU,WAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAU,kBAAkB,cAAY,WAA7C,UACE,+BACE,sBAAMA,UAAU,gBAAgBwB,MAAM,SAAtC,SAAgDV,GAA4B,OAE9E,mBAAGd,UAAU,yBAEf,qBAAKA,UAAU,gCAAf,SACE,oBAAIA,UAAU,+BAA+ByB,GAAG,aAAhD,gBACG2D,QADH,IACGA,OADH,EACGA,EAAalE,KAAI,SAACiE,EAAWpC,GAC5B,OACE,oBAAgBrB,QAAS,kBAAM,EAAKwD,UAAUC,IAAY1D,GAAG,MAAMzB,UAAU,yBAAyByE,MAAM,SAA5G,SACE,uBAAOzE,UAAU,yBAAjB,SAA2CmF,KADpCpC,aASnB,sBAAK/C,UAAU,qCAAf,UACE,sBAAMA,UAAU,eAAhB,SACE,uBACEmC,KAAK,SACLV,GAAG,SACHzB,UAAU,+BACV+F,YAAY,eACZC,WAAY5F,KAAKmE,uBAGrB,sBAAMvE,UAAU,cAAc0B,QAAStB,KAAK2E,WAA5C,SACE,mBAAG/E,UAAU,wBAKrB,qBAAKA,UAAU,cAAf,SACGI,KAAKiD,MAAM9C,WACV,uBAAMP,UAAU,eAAe0B,QAAStB,KAAKiE,eAA7C,UACE,mBAAGrE,UAAU,yBADf,0BAIA,uBAAMA,UAAU,eAAe0B,QAAStB,KAAKkE,oBAA7C,mCACyB9D,EAAmBS,OAD5C,YAMN,sBAAKjB,UAAU,aAAf,UACE,cAAC,EAAD,CACEM,QAASA,GAAWA,EACpBC,WAAYH,KAAKiD,MAAM9C,WACvBG,YAAaN,KAAKuD,SAClBlD,aAAcL,KAAK+C,oBACnB3C,mBAAoBA,EACpBG,UAAWA,EACXI,UAAWA,EACXH,aAAcgD,GAASA,EACvB/C,KAAMA,GAAQA,EACdC,YAAaA,GAAeA,IAE9B,qBAAKd,UAAU,cAAf,SACGI,KAAKiD,MAAM9C,WAAa,GAEvB,uBAAMP,UAAU,YAAhB,qBACWM,EAAQW,OADnB,MAC8B,IAC3B2C,EAFH,mBAON,qBAAK5D,UAAU,eAAf,SACE,sBAAKA,UAAU,QAAf,UACE,wBACEA,UAAU,iBACV0B,QAAS,kBAAM,EAAKwC,cAAa,IAFnC,oBAMA,yBACElE,UAAU,cACV0B,QAAS,kBAAM,EAAKwC,cAAa,IAFnC,UAIE,mBAAGlE,UAAU,YAJf,yBAKyBQ,EAAmBS,OAL5C,qB,GAxTqBhB,IAAMgD,eCD5BgD,EAAb,kDACE,WAAY5F,GAAQ,IAAD,8BACjB,cAAMA,IA2DR6F,cAAgB,SAAC9C,GACfA,EAAgBnC,OAAS,EACrB4C,OAAOC,OAAOC,YACd,CACEC,QAAS,2BACTxD,mBAAoB4C,GAEtB,KAEAS,OAAOC,OAAOC,YACd,CACEC,QAAS,0CAEX,KAEJH,OAAOsC,SAxEP,EAAK9C,MAAQ,CACXW,QAAS,GACToC,YAAQb,EACRH,iBAAaG,EACbjF,QAAS,GACTqF,aAAc,GACdC,eAAgB,GAChBpF,mBAAoB,IAEtB,EAAK0F,cAAgB,EAAKA,cAAcV,KAAnB,gBAZJ,EADrB,qDAgBE,WAAqB,IAAD,OAEb3B,OAAOC,QACVD,OAAOsC,QAETtC,OAAOC,OAAOC,YACZ,CAAEC,QAAS,kCAAmCqC,WAAW,GACzD,KAmCFxC,OAAOyC,iBAAiB,WAjCD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpBA,EAAKH,QACP,EAAK5C,SAAS,CACZQ,QAASuC,EAAKvC,QACdoC,OAAQG,EAAKH,OACbhB,YAAamB,EAAKnB,cAGlBmB,EAAK/F,oBACP,EAAKgD,SAAS,CACZQ,QAASuC,EAAKvC,QACdxD,mBAAoB+F,EAAK/F,qBAGzB+F,EAAKjG,SACP,EAAKkD,SAAS,CACZQ,QAASuC,EAAKvC,QACd1D,QAASiG,EAAKjG,UAGdiG,EAAKX,gBACP,EAAKpC,SAAS,CACZQ,QAASuC,EAAKvC,QACd4B,eAAgBW,EAAKX,iBAGrBW,EAAKZ,cACP,EAAKnC,SAAS,CACZQ,QAASuC,EAAKvC,QACd2B,aAAcY,EAAKZ,kBAI0B,KA1DvD,oBA+EE,WACE,MAAoGvF,KAAKiD,MAAjG+C,EAAR,EAAQA,OAAQhB,EAAhB,EAAgBA,YAAa9E,EAA7B,EAA6BA,QAASqF,EAAtC,EAAsCA,aAAcC,EAApD,EAAoDA,eAAgB5B,EAApE,EAAoEA,QAASxD,EAA7E,EAA6EA,mBAE7E,OACE,8BACG4F,GACC,cAAC,EAAD,CACEA,OAAQA,EACRhB,YAAaA,EACb9E,QAASA,EACT0D,QAASA,EACT2B,aAAcA,EACdC,eAAgBA,EAChBxB,YAAahE,KAAK8F,cAClB1F,mBAAoBA,UA7FhC,GAA2BP,IAAMC,WCclBsG,MAbf,WAEE,OACE,qBAAKxG,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOyG,OAAK,EAACC,KAAK,IAAIC,UAAWV,WCE5BW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.4523a597.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Loader extends React.Component {\n  render() {\n    return (\n      <div className=\"loader\">\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n        <div>\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Loader from \"./loader\";\nimport moment from \"moment\";\nimport \"../styles/modal.css\";\n\nexport default class ListLayout extends React.PureComponent {\n  render() {\n    const { entries, isSelected, selectedRefEntries, handleSelect, loadContent, searchMsg, totalEntries, skip, selectedRef, isLoading } = this.props;\n    let renderEntries = isSelected ? selectedRefEntries : entries;\n\n    return (\n      <ul className=\"list-layout\">\n        <li className=\"table-head\">\n          <div className=\"table-cell w-5\"></div>\n          <div className=\"table-cell w-32\">Name</div>\n          <div className=\"table-cell w-32\">MODIFIED AT</div>\n          <div className=\"table-cell w-30\">PUBLISH DETAILS</div>\n        </li>\n        <div className=\"table-body\">\n          {renderEntries.length > 0 ? (\n            <>\n              <ul>\n                {renderEntries?.map((entry) => {\n                  const checked = selectedRefEntries.some(\n                    (check) => check.uid === entry.uid\n                  );\n                  return (\n                    <li\n                      title={entry.title}\n                      id={entry.uid}\n                      key={entry.uid}\n                      className={checked ? \"active\" : \"\"}\n                      onClick={(event) => {\n                        const liElement = event.currentTarget;\n                        !checked && entry.uid === liElement.id\n                          ? liElement.classList.add(\"active\")\n                          : liElement.classList.remove(\"active\");\n                        handleSelect(entry);\n                        const checkbox =\n                          liElement.childNodes[0].childNodes[0].childNodes[0];\n                        checkbox.checked = !checkbox.checked;\n                      }}\n                    >\n                      <div className=\"cs-checkbox w-5\">\n                        <label>\n                          <input\n                            type=\"checkbox\"\n                            className=\"cs\"\n                            defaultChecked={checked}\n                            onChange={(event) => {\n                              const style = event.target.parentNode.parentNode.parentNode;\n\n                              !checked && entry.uid === style.id\n                                ? style.classList.add(\"active\")\n                                : style.classList.remove(\"active\");\n                              handleSelect(entry);\n                            }}\n                          />\n                          <span className=\"lbl\"></span>\n                        </label>\n                      </div>\n                      {isSelected ?\n                        <div className=\"table-cell w-35\">{entry.title}\n                          <div className=\"content-type\">Content type: <span>{entry._content_type_uid}</span></div>\n                        </div>\n                        :\n                        <div className=\"table-cell w-35\">{entry.title}</div>\n                      }\n                      <div className=\"table-cell w-35\">\n                        {moment(entry.updated_at).format(\n                          \"ddd, MMM D YYYY\"\n                        )}</div>\n                      <div className=\"table-cell w-32\">{\n                        entry.publish_details.length > 0 ? entry.publish_details.map((env, index) => {\n                          return (\n                            <li key={index} className=\"env\">{env}\n                              <div>\n                                <i className=\"icon-exclamation-sign status-publish\"></i>\n                              </div>\n                            </li>\n                          )\n                        })\n                          : <li className=\"env\">Not Published</li>}\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n              <div className=\"load-more\" id=\"loadMore\" onClick={loadContent}\n                style={{\n                  display:\n                    isSelected || skip[selectedRef] > totalEntries\n                      ? \"none\"\n                      : \"block\",\n                }}\n              >\n                <a>Load More</a>\n              </div>\n            </>\n          ) : (\n            searchMsg && !isLoading ?\n              <div className=\"no-item-found\">No entries found</div>\n              :\n              <Loader />\n          )}\n        </div>\n      </ul>\n    );\n  }\n}\n","import React from \"react\";\nimport ListLayout from \"./listLayout\";\nimport \"../styles/modal.css\";\n\nexport default class Modal extends React.PureComponent {\n  constructor() {\n    super();\n    this.extension = {};\n    this.state = {\n      isSelected: false,\n      searchQuery: \"\",\n      entries: [],\n      initialEntries: [],\n      count: 0,\n      skip: {},\n      selectedRefEntries: [],\n      isLoading: true,\n      searchMsg: false,\n      selectedRef: undefined\n    };\n    this.loadMore = this.loadMore.bind(this);\n    this.selectingRefEntries = this.selectingRefEntries.bind(this);\n    this.fetchQuery = this.fetchQuery.bind(this);\n    this.searchQueryHandler = this.searchQueryHandler.bind(this);\n  }\n\n  selectingRefEntries = (selectedEntries) => {\n    const { selectedRefEntries } = this.state;\n    const checkList = selectedRefEntries.some(\n      (entry) => entry.uid === selectedEntries.uid\n    );\n    if (checkList) {\n      selectedRefEntries.splice(\n        selectedRefEntries.findIndex(\n          (index) => index.uid === selectedEntries.uid\n        ),\n        1\n      );\n      this.setState({\n        selectedRefEntries: [...selectedRefEntries]\n      });\n    } else {\n      const newlist = [...selectedRefEntries];\n      newlist.push(selectedEntries);\n      this.setState({ selectedRefEntries: newlist });\n    }\n  };\n\n  componentDidMount() {\n    const { referenceTo } = this.props;\n    let { skip } = this.state;\n\n    referenceTo.forEach((reference) => {\n      skip[reference] = 0;\n    });\n\n    this.setState({\n      referenceTo: referenceTo,\n      selectedRef: referenceTo[0]\n    });\n\n    window.opener.postMessage({ message: 'add', skip: skip, selectedRef: referenceTo[0] }, '*');\n\n    this.setState(prevState => ({\n      skip: {\n        ...prevState.skip,\n        [referenceTo[0]]: skip[referenceTo[0]] + 10\n      }\n    }))\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const { selectedRefEntries } = this.props;\n\n    if (newProps.selectedRefEntries !== selectedRefEntries) {\n      this.setState({\n        selectedRefEntries: newProps.selectedRefEntries,\n      });\n    }\n\n    if (newProps.entries.count > 0) {\n      this.setState({\n        entries: newProps.entries.entries,\n        count: newProps.entries.count,\n        initialEntries: newProps.entries.entries,\n        initialCount: newProps.entries.count,\n        searchMsg: false,\n        isLoading: false\n      })\n    }\n    else {\n      setTimeout(() => {\n        this.setState({ searchMsg: true });\n      }, 1000)\n      this.setState({\n        isLoading: false\n      });\n    }\n\n    if (newProps.message === 'searchResult' && newProps.searchResult.count >= 0) {\n      this.setState({\n        entries: newProps.searchResult.entries,\n        count: newProps.searchResult.count\n      })\n\n      if (newProps.searchResult.count === 0) {\n        this.setState({\n          searchMsg: true,\n          isLoading: false\n        });\n      }\n    }\n\n    if (newProps.message === 'loadmoreResult' && newProps.loadmoreResult.count > 0) {\n      this.setState({\n        entries: this.state.entries.concat(newProps.loadmoreResult.entries)\n      })\n\n      if (this.state.skip[this.state.selectedRef] > this.state.count) {\n        document.getElementById('loadMore').style.display = 'none'\n      }\n    }\n  }\n\n  loadMore = () => {\n    let { skip, count, selectedRef } = this.state;\n\n    if (skip[selectedRef] <= count) {\n      window.opener.postMessage({ message: 'loadmore', skip: skip, selectedRef: selectedRef }, '*');\n\n      this.setState(prevState => ({\n        skip: {\n          ...prevState.skip,\n          [selectedRef]: skip[selectedRef] + 10\n        }\n      }))\n    }\n  };\n\n  sendAndClose = (closeandsend) => {\n    const { selectedRefEntries } = this.state;\n    closeandsend\n      ? this.props.closeWindow(selectedRefEntries)\n      : this.props.closeWindow([]);\n  };\n\n  showAllEntries = () => {\n    this.setState((prevState) => ({\n      isSelected: !prevState.isSelected,\n    }));\n  }\n\n  showselectedEntries = () => {\n    this.setState((prevState) => ({\n      isSelected: !prevState.isSelected\n    }));\n  }\n\n  searchQueryHandler = (event) => {\n    let { selectedRef } = this.state;\n    const query = event.target.value.toLowerCase();\n    this.setState({ searchQuery: query });\n\n    if (event.charCode === 13) {\n      if (query !== '') {\n        window.opener.postMessage({ message: 'search', query: query, selectedRef: selectedRef }, '*');\n      } else {\n        this.setState(prevState => ({\n          entries: prevState.initialEntries,\n          count: prevState.initialCount,\n          skip: {\n            ...prevState.skip,\n            [selectedRef]: 10\n          }\n        }))\n      }\n    }\n  };\n\n  fetchQuery = () => {\n    let { selectedRef } = this.state;\n    let query = document.getElementById('search').value;\n\n    if (query !== '') {\n      window.opener.postMessage({ message: 'search', query: query, selectedRef: selectedRef }, '*');\n    } else {\n      this.setState(prevState => ({\n        entries: this.state.initialEntries,\n        count: this.state.initialCount,\n        skip: {\n          ...prevState.skip,\n          [selectedRef]: 10\n        }\n      }))\n    }\n  };\n\n  selectRef = (reference) => {\n    let { skip } = this.state;\n\n    this.props.referenceTo.forEach((reference) => {\n      skip[reference] = 0;\n    });\n\n    this.setState(prevState => ({\n      entries: [],\n      initialEntries: [],\n      count: 0,\n      isLoading: true,\n      searchMsg: true,\n      selectedRef: reference,\n      skip: {\n        ...prevState.skip,\n        [reference]: skip[reference] + 10\n      }\n    }))\n\n    window.opener.postMessage({ message: 'add', skip: skip, selectedRef: reference }, '*');\n  }\n\n  render() {\n    const { referenceTo, entries, count, selectedRefEntries, searchMsg, skip, selectedRef, isLoading } = this.state;\n\n    return (\n      <div className=\"modal display-block\">\n        <section className=\"modal-main\">\n          {this.props.children}\n          <div className=\"modal-header\">\n            <h2>Choose Entries</h2>\n          </div>\n          <div className=\"search-bar\">\n            {this.state.isSelected ?\n              <div className=\"show-selected-entries\">\n                <span>{selectedRefEntries.length} entries selected</span>\n              </div>\n              :\n              <div className=\"form-grp\">\n                <div className=\"cs-pagination clearfix\">\n                  <div className=\"selected-filter\" data-toggle=\"dropdown\">\n                    <span>\n                      <span className=\"active-filter\" title=\"Active\">{selectedRef ? selectedRef : ''}</span>\n                    </span>\n                    <i className=\"icon-chevron-down\"></i>\n                  </div>\n                  <div className=\"dropdown-menu select-controls\">\n                    <ul className=\"scroll-bar-design no-padding\" id=\"filterList\">\n                      {referenceTo?.map((reference, index) => {\n                        return (\n                          <li key={index} onClick={() => this.selectRef(reference)} id=\"all\" className=\"filter selected-option\" value=\"active\">\n                            <label className=\"lbl dropdown-text-wrap\">{reference}</label>\n                          </li>\n                        )\n                      })}\n                    </ul>\n                  </div>\n\n                </div>\n                <div className=\"cs-form-group search-box no-margin\">\n                  <span className=\"search-input\">\n                    <input\n                      type=\"search\"\n                      id=\"search\"\n                      className=\"cs-text-box cs-global-search\"\n                      placeholder=\"Search Entry\"\n                      onKeyPress={this.searchQueryHandler}\n                    />\n                  </span>\n                  <span className=\"search-icon\" onClick={this.fetchQuery}>\n                    <i className=\"icon-search\"></i>\n                  </span>\n                </div>\n              </div>\n            }\n            <div className=\"ref-section\">\n              {this.state.isSelected ?\n                <span className=\"select-count\" onClick={this.showAllEntries}>\n                  <i className=\"icon icon-angle-left\"></i>Back to entries list\n                </span>\n                :\n                <span className=\"select-count\" onClick={this.showselectedEntries}>\n                  Show selected entries({selectedRefEntries.length})\n              </span>\n              }\n            </div>\n          </div>\n          <div className=\"modal-body\">\n            <ListLayout\n              entries={entries && entries}\n              isSelected={this.state.isSelected}\n              loadContent={this.loadMore}\n              handleSelect={this.selectingRefEntries}\n              selectedRefEntries={selectedRefEntries}\n              searchMsg={searchMsg}\n              isLoading={isLoading}\n              totalEntries={count && count}\n              skip={skip && skip}\n              selectedRef={selectedRef && selectedRef}\n            />\n            <div className=\"ref-section\">\n              {this.state.isSelected ? ''\n                :\n                <span className=\"ref-count\">\n                  showing {entries.length} of{\" \"}\n                  {count} entries\n              </span>}\n            </div>\n          </div>\n\n          <div className=\"modal-footer\">\n            <div className=\"right\">\n              <button\n                className=\"cancel-btn btn\"\n                onClick={() => this.sendAndClose(false)}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"add-btn btn\"\n                onClick={() => this.sendAndClose(true)}\n              >\n                <i className=\"icon-ok\"></i>\n                Add Selected Entries ({selectedRefEntries.length})\n              </button>\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Modal from \"./components/modal\";\n\nexport class Popup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      config: undefined,\n      referenceTo: undefined,\n      entries: [],\n      searchResult: [],\n      loadmoreResult: [],\n      selectedRefEntries: [],\n    };\n    this.onCloseWindow = this.onCloseWindow.bind(this);\n  }\n\n  componentDidMount() {\n    // this route should only be availble from a popup\n    if (!window.opener) {\n      window.close();\n    }\n    window.opener.postMessage(\n      { message: \"get config and selected entries\", getConfig: true },\n      \"*\"\n    );\n    const receiveMessage = ({ data }) => {\n      if (data.config) {\n        this.setState({\n          message: data.message,\n          config: data.config,\n          referenceTo: data.referenceTo,\n        });\n      }\n      if (data.selectedRefEntries) {\n        this.setState({\n          message: data.message,\n          selectedRefEntries: data.selectedRefEntries,\n        });\n      }\n      if (data.entries) {\n        this.setState({\n          message: data.message,\n          entries: data.entries\n        })\n      }\n      if (data.loadmoreResult) {\n        this.setState({\n          message: data.message,\n          loadmoreResult: data.loadmoreResult\n        })\n      }\n      if (data.searchResult) {\n        this.setState({\n          message: data.message,\n          searchResult: data.searchResult\n        })\n      }\n    };\n    window.addEventListener(\"message\", receiveMessage, false);\n  }\n\n  onCloseWindow = (selectedEntries) => {\n    selectedEntries.length > 0\n      ? window.opener.postMessage(\n        {\n          message: \"sending selected entries\",\n          selectedRefEntries: selectedEntries,\n        },\n        \"*\"\n      )\n      : window.opener.postMessage(\n        {\n          message: \"Window closed sending selected entries\",\n        },\n        \"*\"\n      );\n    window.close();\n  };\n\n  render() {\n    const { config, referenceTo, entries, searchResult, loadmoreResult, message, selectedRefEntries } = this.state;\n\n    return (\n      <div>\n        {config && (\n          <Modal\n            config={config}\n            referenceTo={referenceTo}\n            entries={entries}\n            message={message}\n            searchResult={searchResult}\n            loadmoreResult={loadmoreResult}\n            closeWindow={this.onCloseWindow}\n            selectedRefEntries={selectedRefEntries}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { Popup } from \"./Popup\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Popup} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}